// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chat.proto

#include "chat.pb.h"
#include "chat.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace chat {

static const char* Chatter_method_names[] = {
  "/chat.Chatter/RouteChat",
};

std::unique_ptr< Chatter::Stub> Chatter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Chatter::Stub> stub(new Chatter::Stub(channel));
  return stub;
}

Chatter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RouteChat_(Chatter_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::chat::ChatMessage, ::chat::ChatMessage>* Chatter::Stub::RouteChatRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::chat::ChatMessage, ::chat::ChatMessage>::Create(channel_.get(), rpcmethod_RouteChat_, context);
}

void Chatter::Stub::experimental_async::RouteChat(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::chat::ChatMessage,::chat::ChatMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::chat::ChatMessage,::chat::ChatMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_RouteChat_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::chat::ChatMessage, ::chat::ChatMessage>* Chatter::Stub::AsyncRouteChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::chat::ChatMessage, ::chat::ChatMessage>::Create(channel_.get(), cq, rpcmethod_RouteChat_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::chat::ChatMessage, ::chat::ChatMessage>* Chatter::Stub::PrepareAsyncRouteChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::chat::ChatMessage, ::chat::ChatMessage>::Create(channel_.get(), cq, rpcmethod_RouteChat_, context, false, nullptr);
}

Chatter::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Chatter_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Chatter::Service, ::chat::ChatMessage, ::chat::ChatMessage>(
          std::mem_fn(&Chatter::Service::RouteChat), this)));
}

Chatter::Service::~Service() {
}

::grpc::Status Chatter::Service::RouteChat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::chat::ChatMessage, ::chat::ChatMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace chat

